mutate(Syll = case_when(
Syll == "<p>Y" ~ "<p>",
Syll == "Pre" ~ "pre",
Syll == "Post" ~ "post",
Syll == "Post_Pre" ~ "post_pre",
Syll == "Post_pre" ~ "post_pre",
Syll == "post:pre" ~ "post_pre",
Syll == "post_Pre" ~ "post_pre",
Syll == "prepost" ~ "post_pre",
Syll == "post_post" ~ "post_pre",
Syll == "post_pre " ~ "post_pre", # Remove trailing space
TRUE ~ Syll # Keep other values as they are
))
unique(df$Syll)
# Update df with modified 'Syll' values
df <- df %>%
mutate(Syll = case_when(
Syll == "<p>Y" ~ "<p>",
Syll == "Pre" ~ "pre",
Syll == "Post" ~ "post",
Syll == "Post_Pre" ~ "post_pre",
Syll == "Post_pre" ~ "post_pre",
Syll == "post:pre" ~ "post_pre",
Syll == "post-pre" ~ "post_pre",
Syll == "post_Pre" ~ "post_pre",
Syll == "prepost" ~ "post_pre",
Syll == "post_post" ~ "post_pre",
Syll == "post_pre " ~ "post_pre", # Remove trailing space
TRUE ~ Syll # Keep other values as they are
))
unique(df$Syll)
# Update df with modified 'Syll' values
df <- df %>%
mutate(Syll = case_when(
Syll == "<p>Y" ~ "<p>",
Syll == "Pre" ~ "pre",
Syll == "Post" ~ "post",
Syll == "Post_Pre" ~ "post_pre",
Syll == "Post_pre" ~ "post_pre",
Syll == "post:pre" ~ "post_pre",
Syll == "post-pre" ~ "post_pre",
Syll == "post–pre" ~ "post_pre",
Syll == "post_Pre" ~ "post_pre",
Syll == "prepost" ~ "post_pre",
Syll == "post_post" ~ "post_pre",
Syll == "post_pre " ~ "post_pre", # Remove trailing space
TRUE ~ Syll # Keep other values as they are
))
unique(df$Syll)
df %>%
filter(Syll == "Post_Pre") %>%
select(File)
df %>%
filter(Syll == "Pre_Post") %>%
select(File)
# Update df with modified 'Syll' values
df <- df %>%
mutate(Syll = case_when(
Syll == "<p>Y" ~ "<p>",
Syll == "Pre" ~ "pre",
Syll == "Post" ~ "post",
Syll == "pre_post" ~ "post_pre",
Syll == "Pre_Post" ~ "post_pre",
Syll == "Post_Pre" ~ "post_pre",
Syll == "Post_pre" ~ "post_pre",
Syll == "post:pre" ~ "post_pre",
Syll == "post-pre" ~ "post_pre",
Syll == "post–pre" ~ "post_pre",
Syll == "post_Pre" ~ "post_pre",
Syll == "prepost" ~ "post_pre",
Syll == "post_post" ~ "post_pre",
Syll == "post_pre " ~ "post_pre", # Remove trailing space
TRUE ~ Syll # Keep other values as they are
))
unique(df$Syll)
# Chunk 27: sylls per lang
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
group_by(Language) %>%
summarize(Cumulative_Count = n())
# Chunk 28: sylls per foc
syll_per_foc <-
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
group_by(Language, Focus) %>%
summarize(Count = n()) %>%
mutate(Proportion = Count / sum(Count))
syll_per_foc
## Count
ggplot(syll_per_foc, aes(x = Focus, y = Count, fill = Language)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
labs(#title = "Count of focus types",
x = "Focus", y = "Count") +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_count.pdf"), plot = last_plot(), width = 6, height = 4)
## Proportion
ggplot(syll_per_foc, aes(x = Focus, y = Proportion, fill = Language)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
labs(#title = "Proportion of focus types",
x = "Focus", y = "Proportion") +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_prop.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 29: sylls per pros
syll_per_pros <-
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Count = n()) %>%
mutate(Proportion = Count / sum(Count))
syll_per_pros
# Identify NA
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
filter(Language == "German", is.na(Prosodic_Prom)) %>%
select(File, Syll)
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
filter(Language == "Catalan", is.na(Prosodic_Prom)) %>%
select(File, Syll)
# Correct and add ratings
df <- df %>%
# First, handle the specific updates for Prosodic_Prom
mutate(Prosodic_Prom = case_when(
File == "G17_T_35_B" & Syll == "pfan" ~ 2,
File == "C02_T_13_I" & Syll == "lor_pre" ~ 1,
File == "C02_T_14_F" & Syll == "lor_pre" ~ 1,
TRUE ~ Prosodic_Prom
)) %>%
# Then, filter out the specific row to delete
# This case is arguably important, but since it is not the real target word, I delete it
filter(!(File == "G14_T_22_R" & Syll == "an"))
## Count
ggplot(syll_per_pros, aes(x = Prosodic_Prom, y = Count, fill = Language)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
labs(#title = "Count of Syll per Language and Prominence",
x = "Perceived prominence", y = "Count") +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_count.pdf"), plot = last_plot(), width = 6, height = 4)
## Proportion
ggplot(syll_per_pros, aes(x = Prosodic_Prom, y = Proportion, fill = Language)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
labs(#title = "Proportion of Syll per Language and Prominence",
x = "Perceived prominence", y = "Proportion") +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_prop.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 30: avg duration
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_Duration = mean(duration, na.rm = TRUE))
# Chunk 31: avg duration plot
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = duration, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "Duration of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Duration",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_duration.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 32: avg F0
# Calculate z-scores for F0 within each combination of Language and Speaker
df_targets <- df_targets %>%
group_by(Language, Participant) %>%
mutate(F0_mean_z = scale(F0_mean))
# Calculate means for raw F0
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_F0 = mean(F0_mean, na.rm = TRUE))
# Calculate means for z-scored F0
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_F0_z = mean(F0_mean_z, na.rm = TRUE))
# Chunk 33: avg F0 plot
## Raw F0
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = F0_mean, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Mean f0 (Hertz)",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_f0Mean_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored F0
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = F0_mean_z, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Mean f0 (z-scored)",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_f0Mean_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 34: range F0
# Calculate z-scores for F0 within each combination of Language and Speaker
df_targets <- df_targets %>%
group_by(Language, Participant) %>%
mutate(F0_range_z = scale(F0_range))
# Calculate means for raw F0
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_F0_range = mean(F0_range, na.rm = TRUE))
# Calculate means for z-scored F0
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_F0_range_z = mean(F0_range_z, na.rm = TRUE))
# Chunk 35: range F0 plot
## Raw F0
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = F0_range, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "f0 range (Hertz)",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_f0Range_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored F0
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = F0_mean_z, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "f0 range (z-scored)",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_f0Range_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 36: avg env
# Calculate z-scores for F0 within each combination of Language and Speaker
df_targets <- df_targets %>%
group_by(Language, Participant) %>%
mutate(env_mean_z = scale(env_mean))
# Calculate means for raw F0
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_env = mean(env_mean, na.rm = TRUE))
# Calculate means for z-scored F0
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_env_z = mean(env_mean_z, na.rm = TRUE))
# Chunk 37: avg env plot
## Raw env
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = env_mean, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Mean amplitude envelope",
fill = "Prosodic Prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_envMean_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored env
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = env_mean_z, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Mean amplitude envelope (z-scored)",
fill = "Prosodic Prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_envMean_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 38: avg env
# Calculate z-scores for F0 within each combination of Language and Speaker
df_targets <- df_targets %>%
group_by(Language, Participant) %>%
mutate(env_range_z = scale(env_range))
# Calculate means for raw envelope range
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_env_range = mean(env_range, na.rm = TRUE))
# Calculate means for z-scored envelope range
df_targets %>%
group_by(Language, Prosodic_Prom) %>%
summarize(Average_env_range_z = mean(env_range_z, na.rm = TRUE))
# Chunk 39: avg env plot
## Raw env
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = env_range, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Amplitude envelope range",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_envRange_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored env
ggplot(df_targets %>% filter(!is.na(Prosodic_Prom)), aes(x = Language, y = env_mean_z, fill = as.factor(Prosodic_Prom))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Prosodic Prominence Ratings by Language",
x = "Language",
y = "Amplitude envelope range (z-scored)",
fill = "Prosodic prominence"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "prominence_envRange_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 40: avg duration
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>"))) %>%
group_by(Language, Focus) %>%
summarize(Average_Duration = mean(duration, na.rm = TRUE))
# Chunk 41: avg duration plot
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = duration, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "Duration of Focus Ratings by Language",
x = "Language",
y = "Duration",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_duration.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 42: avg F0
# Calculate means for raw F0
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_F0 = mean(F0_mean, na.rm = TRUE))
# Calculate means for z-scored F0
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_F0_z = mean(F0_mean_z, na.rm = TRUE))
# Chunk 43: avg F0 plot
## Raw F0
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = F0_mean, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Focus Ratings by Language",
x = "Language",
y = "Mean f0 (Hertz)",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_f0Mean_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored F0
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = F0_mean_z, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Focus Ratings by Language",
x = "Language",
y = "Mean f0 (z-scored)",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_f0Mean_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 44: range F0
# Calculate means for raw F0
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_F0_range = mean(F0_range, na.rm = TRUE))
# Calculate means for z-scored F0
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_F0_range_z = mean(F0_range_z, na.rm = TRUE))
# Chunk 45: range F0 plot
## Raw F0
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = F0_range, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Focus Ratings by Language",
x = "Language",
y = "f0 range (Hertz)",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_f0Range_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored F0
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = F0_mean_z, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "F0 means of Focus Ratings by Language",
x = "Language",
y = "f0 range (z-scored)",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_f0Range_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 46: avg env
# Calculate means for raw F0
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_env = mean(env_mean, na.rm = TRUE))
# Calculate means for z-scored F0
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_env_z = mean(env_mean_z, na.rm = TRUE))
# Chunk 47: avg env plot
## Raw env
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = env_mean, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Focus Ratings by Language",
x = "Language",
y = "Mean amplitude envelope",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_envMean_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored env
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = env_mean_z, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Focus Ratings by Language",
x = "Language",
y = "Mean amplitude envelope (z-scored)",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_envMean_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 48: avg env
# Calculate means for raw envelope range
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_env_range = mean(env_range, na.rm = TRUE))
# Calculate means for z-scored envelope range
df_targets %>%
group_by(Language, Focus) %>%
summarize(Average_env_range_z = mean(env_range_z, na.rm = TRUE))
# Chunk 49: avg env plot
## Raw env
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = env_range, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Focus Ratings by Language",
x = "Language",
y = "Amplitude envelope range",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_envRange_raw.pdf"), plot = last_plot(), width = 6, height = 4)
## z-scored env
ggplot(df_targets %>% filter(!is.na(Focus)), aes(x = Language, y = env_mean_z, fill = as.factor(Focus))) +
geom_violin(scale = "width", trim = FALSE, alpha = 0.3) +
geom_boxplot(width = 0.1, outlier.shape = NA, position = position_dodge(width = 0.9), alpha = 0.5) +
labs(
#title = "ENV means of Focus Ratings by Language",
x = "Language",
y = "Amplitude envelope range (z-scored)",
fill = "Focus"
) +
scale_fill_manual(values = colorBlindBlack8) +
theme_minimal()
ggsave(filename = paste0(plots, "focus_envRange_z.pdf"), plot = last_plot(), width = 6, height = 4)
# Chunk 50
df %>%
filter(!(Syll %in% c("pre", "post", "", "post_pre", "disfluency", "break", "<p>")))
# Chunk 51: prepost
df %>%
arrange(Syll_num) %>%
group_by(Syll) %>%
mutate(
prev_duration = case_when(
Syll %in% c("pre", "post_pre") ~ lag(duration),
TRUE ~ lag(duration, 2)
),
next_duration = case_when(
Syll %in% c("post", "post_pre") ~ lead(duration),
TRUE ~ lead(duration, 2)
)
) %>%
summarize(
avg_prev_duration = mean(prev_duration, na.rm = TRUE),
avg_curr_duration = mean(duration),
avg_next_duration = mean(next_duration, na.rm = TRUE)
) %>%
ungroup()
