return(participant_effects)
}
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
combine_fixed_random <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Combine fixed and random effects for each percProm level
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
# Estimate: sum of fixed and random effects
Estimate = c(
intercept + rand_intercept["Estimate"],
intercept + percProm1 + rand_intercept["Estimate"] + rand_percProm1["Estimate"],
intercept + percProm2 + rand_intercept["Estimate"] + rand_percProm2["Estimate"],
intercept + percProm3 + rand_intercept["Estimate"] + rand_percProm3["Estimate"]
),
# Standard Error: combining errors using sqrt of sum of squares
Est.Error = c(
sqrt(fixef_output["Intercept", "Est.Error"]^2 + rand_intercept["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm1", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm2", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm3", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2)
),
# Q2.5 and Q97.5 need special attention, cannot just sum them
Q2.5 = c(
intercept + rand_intercept["Q2.5"],
intercept + percProm1 + rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
intercept + percProm2 + rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
intercept + percProm3 + rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
),
Q97.5 = c(
intercept + rand_intercept["Q97.5"],
intercept + percProm1 + rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
intercept + percProm2 + rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
intercept + percProm3 + rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
)
)
participant_effects$participant <- participant_id
return(participant_effects)
}
# Extract fixed effects
fixef_mdl_f0_slopeGer <- fixef(mdl_f0_slopeGer)
# Extract random effects for participants
ranef_mdl_f0_slopeGer <- ranef(mdl_f0_slopeGer)
# Get the number of participants
num_participants <- dim(ranef_mdl_f0_slopeGer$participant)[1]
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_pitch_medianGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
# values excluding RE
conditional_effects(mdl_f0_slopeGer, plot = FALSE, re_formula=NA)$percProm
summary(mdl_f0_slopeGer)
combine_fixed_random_student <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Combine fixed and random effects for each percProm level
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
# Estimate: sum of fixed and random effects
Estimate = c(
intercept + rand_intercept["Estimate"],
intercept + percProm1 + rand_intercept["Estimate"] + rand_percProm1["Estimate"],
intercept + percProm2 + rand_intercept["Estimate"] + rand_percProm2["Estimate"],
intercept + percProm3 + rand_intercept["Estimate"] + rand_percProm3["Estimate"]
),
# Standard Error: combining errors using sqrt of sum of squares
Est.Error = c(
sqrt(fixef_output["Intercept", "Est.Error"]^2 + rand_intercept["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm1", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm2", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm3", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2)
),
# Q2.5 and Q97.5: these need to be simulated to reflect the full posterior distribution
Q2.5 = c(
intercept + rand_intercept["Q2.5"],
intercept + percProm1 + rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
intercept + percProm2 + rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
intercept + percProm3 + rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
),
Q97.5 = c(
intercept + rand_intercept["Q97.5"],
intercept + percProm1 + rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
intercept + percProm2 + rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
intercept + percProm3 + rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
)
)
participant_effects$participant <- participant_id
return(participant_effects)
}
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random_student)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
combine_fixed_random_student <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Combine fixed and random effects for each percProm level
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
# Estimate: sum of fixed and random effects
Estimate = c(
rand_intercept["Estimate"],
rand_intercept["Estimate"] + rand_percProm1["Estimate"],
rand_intercept["Estimate"] + rand_percProm2["Estimate"],
rand_intercept["Estimate"] + rand_percProm3["Estimate"]
),
# Standard Error: combining errors using sqrt of sum of squares
Est.Error = c(
sqrt(fixef_output["Intercept", "Est.Error"]^2 + rand_intercept["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm1", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm2", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2),
sqrt(fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm3", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2)
),
# Q2.5 and Q97.5: these need to be simulated to reflect the full posterior distribution
Q2.5 = c(
intercept + rand_intercept["Q2.5"],
intercept + percProm1 + rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
intercept + percProm2 + rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
intercept + percProm3 + rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
),
Q97.5 = c(
intercept + rand_intercept["Q97.5"],
intercept + percProm1 + rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
intercept + percProm2 + rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
intercept + percProm3 + rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
)
)
participant_effects$participant <- participant_id
return(participant_effects)
}
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random_student)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
# plot excluding RE
conditional_effects(mdl_f0_slopeGer, sample_prior = "only", re_formula=NA,)
# plot including RE
conditional_effects(mdl_f0_slopeGer, sample_prior = "only", re_formula=NULL)
combine_fixed_random_student <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Combine fixed and random effects for each percProm level
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
# Estimate: sum of fixed and random effects
Estimate = c(
rand_intercept["Estimate"],
rand_intercept["Estimate"] + rand_percProm1["Estimate"],
rand_intercept["Estimate"] + rand_percProm2["Estimate"],
rand_intercept["Estimate"] + rand_percProm3["Estimate"]
),
# Standard Error: combining errors using sqrt of sum of squares
Est.Error = c(
sqrt(rand_intercept["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2)
),
# Q2.5 and Q97.5: these need to be simulated to reflect the full posterior distribution
Q2.5 = c(
rand_intercept["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
),
Q97.5 = c(
rand_intercept["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
)
)
participant_effects$participant <- participant_id
return(participant_effects)
}
# Extract fixed effects
fixef_mdl_f0_slopeGer <- fixef(mdl_f0_slopeGer)
# Extract random effects for participants
ranef_mdl_f0_slopeGer <- ranef(mdl_f0_slopeGer)
# Get the number of participants
num_participants <- dim(ranef_mdl_f0_slopeGer$participant)[1]
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random_student)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
# Function to back-transform fixed effects from a model
backtransform_fixef <- function(model) {
# Extract fixed effects (population-level)
fixef_output <- fixef(model)
# Extract the estimates for the intercept and percProm levels
intercept <- fixef_output["Intercept", "Estimate"]
percProm1 <- fixef_output["percProm1", "Estimate"]
percProm2 <- fixef_output["percProm2", "Estimate"]
percProm3 <- fixef_output["percProm3", "Estimate"]
# Combine the effects for each percProm level before applying exp()
combined_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
Estimate = exp(c(intercept,  # percProm0 is just the intercept
intercept + percProm1,  # Add percProm1 effect to intercept
intercept + percProm2,  # Add percProm2 effect to intercept
intercept + percProm3)),  # Add percProm3 effect to intercept
# You can calculate confidence intervals by combining Q2.5 and Q97.5 as well
Q2.5 = exp(c(fixef_output["Intercept", "Q2.5"],  # percProm0 interval
fixef_output["Intercept", "Q2.5"] + fixef_output["percProm1", "Q2.5"],  # percProm1 interval
fixef_output["Intercept", "Q2.5"] + fixef_output["percProm2", "Q2.5"],  # percProm2 interval
fixef_output["Intercept", "Q2.5"] + fixef_output["percProm3", "Q2.5"])),  # percProm3 interval
Q97.5 = exp(c(fixef_output["Intercept", "Q97.5"],
fixef_output["Intercept", "Q97.5"] + fixef_output["percProm1", "Q97.5"],
fixef_output["Intercept", "Q97.5"] + fixef_output["percProm2", "Q97.5"],
fixef_output["Intercept", "Q97.5"] + fixef_output["percProm3", "Q97.5"]))
)
return(combined_effects)
}
combine_fixed_random_backtransforming <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Combine fixed and random effects
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
Estimate = exp(c(
intercept + rand_intercept["Estimate"],
intercept + percProm1 + rand_intercept["Estimate"] + rand_percProm1["Estimate"],
intercept + percProm2 + rand_intercept["Estimate"] + rand_percProm2["Estimate"],
intercept + percProm3 + rand_intercept["Estimate"] + rand_percProm3["Estimate"]
)),
Est.Error = c(
sqrt(fixef_output["Intercept", "Est.Error"]^2 + rand_intercept["Est.Error"]^2),
sqrt(
fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm1", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2
),
sqrt(
fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm2", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2
),
sqrt(
fixef_output["Intercept", "Est.Error"]^2 + fixef_output["percProm3", "Est.Error"]^2 +
rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2
)
),
Q2.5 = exp(c(
intercept + rand_intercept["Q2.5"],
intercept + percProm1 + rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
intercept + percProm2 + rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
intercept + percProm3 + rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
)),
Q97.5 = exp(c(
intercept + rand_intercept["Q97.5"],
intercept + percProm1 + rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
intercept + percProm2 + rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
intercept + percProm3 + rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
))
)
participant_effects$participant <- participant_id
return(participant_effects)
}
combine_fixed_random_student <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Extract correlation between intercept and percProm
cor_intercept_percProm1 <- cor_output["Intercept", "percProm1"]
cor_intercept_percProm2 <- cor_output["Intercept", "percProm2"]
cor_intercept_percProm3 <- cor_output["Intercept", "percProm3"]
# Combine fixed and random effects for each percProm level
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
# Estimate: sum of fixed and random effects
Estimate = c(
rand_intercept["Estimate"],
rand_intercept["Estimate"] + rand_percProm1["Estimate"],
rand_intercept["Estimate"] + rand_percProm2["Estimate"],
rand_intercept["Estimate"] + rand_percProm3["Estimate"]
),
# Standard Error: taking correlations into account
Est.Error = c(
sqrt(rand_intercept["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2 + 2 * cor_intercept_percProm1 * rand_intercept["Est.Error"] * rand_percProm1["Est.Error"]),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2 + 2 * cor_intercept_percProm2 * rand_intercept["Est.Error"] * rand_percProm2["Est.Error"]),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2 + 2 * cor_intercept_percProm3 * rand_intercept["Est.Error"] * rand_percProm3["Est.Error"])
),
# Q2.5 and Q97.5: these need to be simulated to reflect the full posterior distribution
Q2.5 = c(
rand_intercept["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
),
Q97.5 = c(
rand_intercept["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
)
)
participant_effects$participant <- participant_id
return(participant_effects)
}
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random_student)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
combine_fixed_random_student <- function(participant_id) {
# Get the random effects for the given participant
rand_intercept <- ranef_output$participant[participant_id, , "Intercept"]
rand_percProm1 <- ranef_output$participant[participant_id, , "percProm1"]
rand_percProm2 <- ranef_output$participant[participant_id, , "percProm2"]
rand_percProm3 <- ranef_output$participant[participant_id, , "percProm3"]
# Combine fixed and random effects for each percProm level
participant_effects <- data.frame(
percProm_level = c("percProm0", "percProm1", "percProm2", "percProm3"),
# Estimate: sum of fixed and random effects
Estimate = c(
rand_intercept["Estimate"],
rand_intercept["Estimate"] + rand_percProm1["Estimate"],
rand_intercept["Estimate"] + rand_percProm2["Estimate"],
rand_intercept["Estimate"] + rand_percProm3["Estimate"]
),
# Standard Error: combining errors using sqrt of sum of squares
Est.Error = c(
sqrt(rand_intercept["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm1["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm2["Est.Error"]^2),
sqrt(rand_intercept["Est.Error"]^2 + rand_percProm3["Est.Error"]^2)
),
# Q2.5 and Q97.5: these need to be simulated to reflect the full posterior distribution
Q2.5 = c(
rand_intercept["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm1["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm2["Q2.5"],
rand_intercept["Q2.5"] + rand_percProm3["Q2.5"]
),
Q97.5 = c(
rand_intercept["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm1["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm2["Q97.5"],
rand_intercept["Q97.5"] + rand_percProm3["Q97.5"]
)
)
participant_effects$participant <- participant_id
return(participant_effects)
}
# Combine effects for all participants
participant_eff_mdl_f0_slopeGer <- lapply(1:num_participants, combine_fixed_random_student)
# Combine into a single data frame for all participants
all_participant_eff_mdl_f0_slopeGer <- do.call(rbind, participant_eff_mdl_f0_slopeGer)
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
ggplot(all_participant_eff_mdl_f0_slopeGer, aes(x = percProm_level, y = Estimate, group = participant, color = as.factor(participant))) +
geom_line(alpha = 0.7, position = position_dodge(width = 0.5)) +
geom_point(size = 2, alpha = 0.8, position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2, position = position_dodge(width = 0.5)) +
labs(x = "Perceived prominence", y = "Predicted f0 median",
color = "Participant") +
theme_minimal() +
theme(legend.position = "right")
ggplot(all_participant_eff_mdl_f0_slopeGer, aes(x = percProm_level, y = Estimate, group = participant, color = as.factor(participant))) +
geom_line(alpha = 0.7) +
geom_point(size = 2, alpha = 0.8) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2) +
facet_wrap(~ participant, scales = "free_y") +  # Create a separate plot for each participant
labs(x = "Perceived prominence", y = "Predicted f0 median") +
theme_minimal() +
theme(legend.position = "none")  # Remove legend as it's redundant with facetting
fixef_mdl_f0_slopeGer
ranef_mdl_f0_slopeGer
# View the effects for all participants
print(all_participant_eff_mdl_f0_slopeGer)
# Calculate Bayesian R²
mdl_f0_slopeGer_R2 <- bayes_R2(mdl_f0_slopeGer)
# Save the R² output
saveRDS(mdl_f0_slopeGer_R2, file = paste0(models, "mdl_f0_slopeGer_R2.rds"))
mdl_f0_slopeGer_R2 <- readRDS(paste0(models, "mdl_f0_slopeGer_R2.rds"))
mdl_f0_slopeGer_R2
# Calculate Bayesian R²
mdl_ampl_sdGer_R2 <- bayes_R2(mdl_ampl_sdGer)
# Save the R² output
saveRDS(mdl_ampl_sdGer_R2, file = paste0(models, "mdl_ampl_sdGer_R2.rds"))
mdl_ampl_sdGer_R2 <- readRDS(paste0(models, "mdl_ampl_sdGer_R2.rds"))
mdl_ampl_sdGer_R2
# Calculate Bayesian R²
mdl_ampl_noSilence_medianPostGer_R2 <- bayes_R2(mdl_ampl_noSilence_medianPostGer)
# Save the R² output
saveRDS(mdl_ampl_noSilence_medianPostGer_R2, file = paste0(models, "mdl_ampl_noSilence_medianPostGer_R2.rds"))
mdl_ampl_noSilence_medianPostGer_R2 <- readRDS(paste0(models, "mdl_ampl_noSilence_medianPostGer_R2.rds"))
mdl_ampl_noSilence_medianPostGer_R2
# Calculate Bayesian R²
mdl_ampl_noSilence_medianGer_R2 <- bayes_R2(mdl_ampl_noSilence_medianGer)
# Save the R² output
saveRDS(mdl_ampl_noSilence_medianGer_R2, file = paste0(models, "mdl_ampl_noSilence_medianGer_R2.rds"))
mdl_ampl_noSilence_medianGer_R2 <- readRDS(paste0(models, "mdl_ampl_noSilence_medianGer_R2.rds"))
mdl_ampl_noSilence_medianGer_R2
# Calculate Bayesian R²
mdl_durationGer_R2 <- bayes_R2(mdl_durationGer)
# Save the R² output
saveRDS(mdl_durationGer_R2, file = paste0(models, "mdl_durationGer_R2.rds"))
mdl_durationGer_R2 <- readRDS(paste0(models, "mdl_durationGer_R2.rds"))
mdl_durationGer_R2
# Calculate Bayesian R²
mdl_flux_sdGer_R2 <- bayes_R2(mdl_flux_sdGer)
# Save the R² output
saveRDS(mdl_flux_sdGer_R2, file = paste0(models, "mdl_flux_sdGer_R2.rds"))
mdl_flux_sdGer_R2 <- readRDS(paste0(models, "mdl_flux_sdGer_R2.rds"))
mdl_flux_sdGer_R2
# Calculate Bayesian R²
mdl_flux_medianGer_R2 <- bayes_R2(mdl_flux_medianGer)
# Save the R² output
saveRDS(mdl_flux_medianGer_R2, file = paste0(models, "mdl_flux_medianGer_R2.rds"))
mdl_flux_medianGer_R2 <- readRDS(paste0(models, "mdl_flux_medianGer_R2.rds"))
mdl_flux_medianGer_R2
# Calculate Bayesian R²
mdl_ampl_noSilence_sdGer_R2 <- bayes_R2(mdl_ampl_noSilence_sdGer)
# Save the R² output
saveRDS(mdl_ampl_noSilence_sdGer_R2, file = paste0(models, "mdl_ampl_noSilence_sdGer_R2.rds"))
mdl_ampl_noSilence_sdGer_R2 <- readRDS(paste0(models, "mdl_ampl_noSilence_sdGer_R2.rds"))
mdl_ampl_noSilence_sdGer_R2
# Calculate Bayesian R²
mdl_pitch_medianPostGer_R2 <- bayes_R2(mdl_pitch_medianPostGer)
# Save the R² output
saveRDS(mdl_pitch_medianPostGer_R2, file = paste0(models, "mdl_pitch_medianPostGer_R2.rds"))
mdl_pitch_medianPostGer_R2 <- readRDS(paste0(models, "mdl_pitch_medianPostGer_R2.rds"))
mdl_pitch_medianPostGer_R2
summary(mdl_ampl_sdGer)
backtransform_fixef(mdl_ampl_sdGer)
exp(fixef(mdl_ampl_sdGer))
plot(mdl_ampl_sdGer)
# plot excluding RE
conditional_effects(mdl_ampl_sdGer, sample_prior = "only", re_formula=NA,)
# values excluding RE
conditional_effects(mdl_ampl_sdGer, plot = FALSE, re_formula=NA)$percProm
# plot including RE
conditional_effects(mdl_ampl_sdGer, sample_prior = "only", re_formula=NULL)
# values excluding RE
conditional_effects(mdl_ampl_sdGer, plot = FALSE, re_formula=NULL)$percProm
data_prepost_ger %>%
group_by(percProm) %>%
summarize(avg = mean(ampl_sd, na.rm = TRUE))
summary(data_prepost_ger$ampl_sd)
pp_check(mdl_ampl_sdGer, ndraws = 100)
em_mdl_ampl_sdGer <- pairs(emmeans(mdl_ampl_sdGer, ~ percProm))
# Backtransform the post.beta values
backtransformed_estimates <- exp(em_mdl_ampl_sdGer@post.beta)
em_mdl_ampl_sdGer@post.beta <- backtransformed_estimates
print(em_mdl_ampl_sdGer)
# Perform pairwise comparisons between levels of percProm
pw_em_mdl_ampl_sdGer <- pairs(em_mdl_ampl_sdGer)
print(pw_em_mdl_ampl_sdGer)
plot(pw_em_mdl_ampl_sdGer)
plot(em_mdl_ampl_sdGer)
# Perform pairwise comparisons between levels of percProm
pw_em_mdl_ampl_sdGer <- pairs(em_mdl_ampl_sdGer)
print(pw_em_mdl_ampl_sdGer)
plot(pw_em_mdl_ampl_sdGer)
# Extract fixed effects
fixef_mdl_ampl_sdGer <- fixef(mdl_ampl_sdGer)
# Extract random effects for participants
ranef_mdl_ampl_sdGer <- ranef(mdl_ampl_sdGer)
# Get the number of participants
num_participants <- dim(ranef_mdl_ampl_sdGer$participant)[1]
# Combine effects for all participants
participant_eff_mdl_ampl_sdGer <- lapply(1:num_participants, combine_fixed_random_backtransforming)
# Combine into a single data frame for all participants
all_participant_eff_mdl_ampl_sdGer <- do.call(rbind, participant_eff_mdl_ampl_sdGer)
# View the effects for all participants
print(all_participant_eff_mdl_ampl_sdGer)
ranef_mdl_ampl_sdGer
fixef_mdl_ampl_sdGer
gc()
