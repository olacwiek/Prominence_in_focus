ci_upper <- quantile(diff, 0.975)
prob <- mean(diff > 0)  # Posterior probability that difference > 0
return(data.frame(Estimate = estimate, SE = se, CI.Lower = ci_lower, CI.Upper = ci_upper, Prob = prob))
}
# Chunk 4: read metadata
participant_info <- read_delim(paste0(data,"ParticipantInfo_GERCAT.csv"), delim = ";")
# Load the information about duration of each segment (if needed)
data_df <- read.table(paste0(syllables, "fileDurationsDF.csv"), header = TRUE, sep = ',')
# Load cleaned syllable data
data <- read_csv(paste0(datasets, "data_cleaned.csv"))
# Load cleaned targets data
targets <- read_csv(paste0(datasets, "targets.csv"))
# Load cleaned targets with pre-post data
data_prepost <- read_csv(paste0(datasets, "data_prepost.csv"))
# Chunk 5: metadata merge
# Process participant_info so that participant number column is only number
participant_info$Participant <- parse_number(participant_info$Participant)
# Convert the column names of participant_info to lowercase
colnames(participant_info) <- tolower(colnames(participant_info))
# Merge the dataframes by "Participant" and "Language"
data_prepost <- merge(data_prepost, participant_info, by = c("participant", "language"), all.x = TRUE)
# Chunk 6: inspect data
# Turn variables to factors
data_prepost$percProm <- as.factor(data_prepost$percProm)
data_prepost$itemNum <- as.factor(data_prepost$itemNum)
data_prepost$focus <- as.factor(data_prepost$focus)
data_prepost$participant <- as.factor(data_prepost$participant)
# Add contrast-coded gender info (in case we want to use if)
data_prepost <- data_prepost %>%
mutate(gender_s = case_when(gender == "female" ~ 0.5,
gender == "male" ~ -0.5))
# First, remove some columns for both languages
data_prepost <- data_prepost %>%
select(-f1_freq_median, -f1_freq_median_norm, -f2_freq_median, -f2_freq_median_norm,
-f1_freq_medianPre, -f1_freq_median_normPre, -f2_freq_medianPre, -f2_freq_median_normPre,
-f1_freq_medianPost, -f1_freq_median_normPost, -f2_freq_medianPost, -f2_freq_median_normPost
)
# Adapt duration scale (because we set the priors for ms, not s)
data_prepost$duration <- data_prepost$duration * 1000
data_prepost$durationPre <- data_prepost$durationPre * 1000
data_prepost$durationPost <- data_prepost$durationPost * 1000
data_prepost$duration_noSilence <- data_prepost$duration_noSilence * 1000
data_prepost$duration_noSilencePre <- data_prepost$duration_noSilencePre * 1000
data_prepost$duration_noSilencePost <- data_prepost$duration_noSilencePost * 1000
# Create data_prepost_german for rows where language is German
data_prepost_ger <- data_prepost %>%
filter(language == "German")
# Create data_prepost_catalan for rows where language is Catalan
data_prepost_cat <- data_prepost %>%
filter(language == "Catalan")
# Select columns for German
data_prepost_ger <- data_prepost_ger %>%
select(fileName, language, participant, gender, gender_s, age,
itemNum, focus, annotationNum, annotationNumTarget,
word, syllText, syllTextPre, syllTextPost, percProm,
f0_slope, f0_slope_norm,
pitch_median, pitch_median_norm,
ampl_sd,
ampl_noSilence_medianPost,
ampl_noSilence_median,
duration,
flux_sd,
flux_median,
ampl_noSilence_sd,
pitch_medianPost, pitch_median_normPost)
# Select columns for Catalan
data_prepost_cat <- data_prepost_cat %>%
select(fileName, language, participant, gender, gender_s, age,
itemNum, focus, annotationNum, annotationNumTarget,
word, syllText, syllTextPre, syllTextPost, percProm,
duration,
f0_slopePost, f0_slope_normPost,
fmDep_medianPost,
entropySh_sd,
flux_medianPost,
ampl_medianPost,
specCentroid_median,
duration_noSilence,
durationPre,
ampl_sd)
# Chunk 7: pauses ger
# First, let's create a copy of data_prepost_ger to work on
data_prepost_ger_updated <- data_prepost_ger
# Add a new column durationPause and pausePre initialized to NA
data_prepost_ger_updated$durationPause <- NA
data_prepost_ger_updated$pausePre <- NA
# Loop through each row in data_prepost_ger where syllTextPre is NA
for (i in 1:nrow(data_prepost_ger_updated)) {
# Check if syllTextPre is NA
if (is.na(data_prepost_ger_updated$syllTextPre[i])) {
# Get the corresponding fileName in this row
fileName_i <- data_prepost_ger_updated$fileName[i]
# Find the index of this fileName in the data dataset
match_idx <- which(data$fileName == fileName_i)
# If a match is found, and the previous row exists (to avoid out of bounds)
if (length(match_idx) > 0 && match_idx > 1) {
# Look at the previous row's syllText to see if it's "-p-"
if (data$syllText[match_idx - 1] == "-p-") {
# Extract the duration value from the previous row
duration_value <- data$duration[match_idx - 1]
# Update syllTextPre with "-p-" in data_prepost_ger
data_prepost_ger_updated$syllTextPre[i] <- "-p-"
# Update the durationPause column with the value from data
data_prepost_ger_updated$durationPause[i] <- duration_value
}
}
}
}
rm(i, fileName_i, duration_value, match_idx)
# Create the pausePre column based on whether durationPause is NA or not
data_prepost_ger_updated$pausePre <- ifelse(is.na(data_prepost_ger_updated$durationPause), "no", "yes")
data_prepost_ger <- data_prepost_ger_updated
rm(data_prepost_ger_updated)
# Chunk 8
table(data_prepost_ger$pausePre)
prop.table(table(data_prepost_ger$pausePre))
# Chunk 9: pauses cat
# First, let's create a copy of data_prepost_cat to work on
data_prepost_cat_updated <- data_prepost_cat
# Add a new column durationPause and pausePre initialized to NA
data_prepost_cat_updated$durationPause <- NA
data_prepost_cat_updated$pausePre <- NA
# Loop through each row in data_prepost_cat where syllTextPre is NA
for (i in 1:nrow(data_prepost_cat_updated)) {
# Check if syllTextPre is NA
if (is.na(data_prepost_cat_updated$syllTextPre[i])) {
# Get the corresponding fileName in this row
fileName_i <- data_prepost_cat_updated$fileName[i]
# Find the index of this fileName in the data dataset
match_idx <- which(data$fileName == fileName_i)
# If a match is found, and the previous row exists (to avoid out of bounds)
if (length(match_idx) > 0 && match_idx > 1) {
# Look at the previous row's syllText to see if it's "-p-"
if (data$syllText[match_idx - 1] == "-p-") {
# Extract the duration value from the previous row
duration_value <- data$duration[match_idx - 1]
# Update syllTextPre with "-p-" in data_prepost_cat
data_prepost_cat_updated$syllTextPre[i] <- "-p-"
# Update the durationPause column with the value from data
data_prepost_cat_updated$durationPause[i] <- duration_value
}
}
}
}
rm(i, fileName_i, duration_value, match_idx)
# Create the pausePre column based on whether durationPause is NA or not
data_prepost_cat_updated$pausePre <- ifelse(is.na(data_prepost_cat_updated$durationPause), "no", "yes")
data_prepost_cat <- data_prepost_cat_updated
rm(data_prepost_cat_updated)
# Chunk 10
table(data_prepost_cat$pausePre)
prop.table(table(data_prepost_cat$pausePre))
# Chunk 11
# Calculate the correlation matrix
corrCat <- cor(data_prepost_cat[, c("duration", "f0_slopePost", "fmDep_medianPost",
"entropySh_sd", "flux_medianPost",
"ampl_medianPost", "specCentroid_median", "duration_noSilence",
"durationPre", "ampl_sd")], use = "complete.obs")
corrplot(corrCat, method = "color", tl.cex = 0.7, number.cex = 0.7, addCoef.col = "black")
# Chunk 12
# Drop unused levels of percProm
data_prepost_cat$percProm <- droplevels(data_prepost_cat$percProm)
# Set sum contrasts for percProm to compare all levels
#contrasts(data_prepost_cat$percProm) <- contr.sum(length(unique(data_prepost_cat$percProm)))
# Chunk 13
summary(data_prepost_cat$gender_s)
# 0.1563
# Chunk 14
data_prepost_cat$percProm <- factor(data_prepost_cat$percProm,
levels = c(1, 2, 3),
ordered = TRUE)
# Chunk 15
durCum <- bf(
percProm ~
duration +
f0_slopePost +
fmDep_medianPost +
entropySh_sd +
flux_medianPost +
ampl_medianPost +
specCentroid_median +
durationPre +
ampl_sd +
(1 | participant)
)
durCum_ranSlopes <- bf(
percProm ~
duration +
f0_slopePost +
fmDep_medianPost +
entropySh_sd +
flux_medianPost +
ampl_medianPost +
specCentroid_median +
durationPre +
ampl_sd +
(1 + duration +
f0_slopePost +
fmDep_medianPost +
flux_medianPost +
ampl_medianPost +
specCentroid_median +
durationPre +
ampl_sd | participant)
)
durCum_allInt <- bf(
percProm ~
(duration +
f0_slopePost +
fmDep_medianPost +
entropySh_sd +
flux_medianPost +
ampl_medianPost +
specCentroid_median +
durationPre +
ampl_sd) *
(duration +
f0_slopePost +
fmDep_medianPost +
flux_medianPost +
ampl_medianPost +
specCentroid_median +
durationPre +
ampl_sd) +
(1 + duration +
f0_slopePost +
fmDep_medianPost +
flux_medianPost +
ampl_medianPost +
specCentroid_median +
durationPre +
ampl_sd | participant)
)
# Chunk 16
get_prior(formula = durCum,
data = data_prepost_cat,
family = cumulative("logit")
)
prior_durCumCat <- c(
set_prior("normal(0, 10)", class = "b", coef = "duration"),
set_prior("normal(0, 10)", class = "b", coef = "specCentroid_median"),
set_prior("normal(0, 10)", class = "b", coef = "durationPre"),
set_prior("normal(0, 2)", class = "b", coef = "f0_slopePost"),
set_prior("normal(0, 2)", class = "b", coef = "fmDep_medianPost"),
set_prior("normal(0, 2)", class = "b", coef = "entropySh_sd"),
set_prior("normal(0, 2)", class = "b", coef = "flux_medianPost"),
set_prior("normal(0, 2)", class = "b", coef = "ampl_medianPost"),
set_prior("normal(0, 2)", class = "b", coef = "ampl_sd"),
set_prior("cauchy(0, 2.5)", class = "sd")
)
# Chunk 17
mdl_durCumCat <- brm(formula = dur,
data = data_prepost_cat,
family = cumulative("logit"),
prior = prior_durCumCat,
#backend = "cmdstanr", # depends on you
cores = 4,
chains = 4,
iter = 8000,
warmup = 4000,
seed = 998,
control = list(max_treedepth = 12,
adapt_delta = 0.99),
file = paste0(models, "mdl_durCumCat.rds"))
# if we need to compress the model more
#saveRDS(mdl_durCumCat, file = paste0(models, "mdl_durCumCat.rds"), compress = "xz")
mdl_durCumCat <- readRDS(paste0(models, "mdl_durCumCat.rds"))
# Chunk 18
# # Calculate Bayesian R²
# mdl_durCumCat_R2 <- bayes_R2(mdl_durCumCat)
# # Save the R² output
# mdl_durCumCat_R2, file = paste0(models, "mdl_durCumCat_R2.rds"))
mdl_durCumCat_R2 <- readRDS(paste0(models, "mdl_durCumCat_R2.rds"))
mdl_durCumCat_R2 <- bayes_R2(mdl_durCumCat)
mdl_durCumCat_R2, file = paste0(models, "mdl_durCumCat_R2.rds"))
pp_check(mdl_durCumCat)
conditional_effects(mdl_durCumCat, re_formula = NA, categorical = TRUE)
"durationPre = 0",
mdl_durationCat <- brm(duration ~ 0 +
percProm + gender_s +
(0 + percProm | participant),
data = data_prepost_cat,
family = lognormal(),
prior = prior_durationCat,
#backend = "cmdstanr", # depends on you
cores = 4,
chains = 4,
iter = 8000,
warmup = 4000,
seed = 998,
control = list(max_treedepth = 12,
adapt_delta = 0.99),
file = paste0(models, "mdl_durationCat.rds"))
# if we need to compress the model more
#saveRDS(mdl_durationCat, file = paste0(models, "mdl_durationCat.rds"), compress = "xz")
mdl_durationCat <- readRDS(paste0(models, "mdl_durationCat.rds"))
post_durationCat <-
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
.width = c(0.66, 0.95),
justification = -0.1,
point_colour = NA
) +
geom_boxplot(
width = 0.15,
outlier.shape = NA,
alpha = 0.5,
position = position_nudge(y = 0.2)
) +
stat_summary(
fun = median,
geom = "point",
color = "red",
size = 2,
position = position_nudge(y = 0.2)
) +
scale_fill_manual(values = colorBlindBlack8) +
coord_flip() +
theme_minimal() +
theme(text = element_text(size = 18)) +
#xlim(1, 3.5) +
labs(
y = "Perceived prominence level",
x = "Posterior duration",
fill = "Perceived\nprominence"
)
post_durationCat;
ggsave(plot = post_durationCat, filename = paste0(plots, "posterior_durationCat.pdf"),
width = 8, height = 6);
ggsave(plot = post_durationCat, filename = paste0(plots, "posterior_durationCat.jpg"),
width = 8, height = 6);
ggsave(plot = post_durationCat, filename = paste0(plots, "posterior_durationCat.tif"),
width = 8, height = 6, compression="lzw", dpi=600);
post_durationCat <-
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
.width = c(0.66, 0.95),
justification = -0.1,
point_colour = NA
) +
geom_boxplot(
width = 0.15,
outlier.shape = NA,
alpha = 0.5,
position = position_nudge(y = 0.2)
) +
scale_fill_manual(values = colorBlindBlack8) +
coord_flip() +
theme_minimal() +
theme(text = element_text(size = 18)) +
#xlim(1, 3.5) +
labs(
y = "Perceived prominence level",
x = "Posterior duration",
fill = "Perceived\nprominence"
)
post_durationCat <-
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
.width = c(0.66, 0.95),
justification = -0.1,
point_colour = NA
) +
geom_boxplot(
width = 0.15,
outlier.shape = NA,
alpha = 0.5,
position = position_nudge(y = 0.2)
) +
scale_fill_manual(values = colorBlindBlack8) +
coord_flip() +
theme_minimal() +
theme(text = element_text(size = 18)) +
#xlim(1, 3.5) +
labs(
y = "Perceived prominence level",
x = "Posterior duration",
fill = "Perceived\nprominence"
)
post_durationCat;
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm))
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
.width = c(0.66, 0.95),
justification = -0.1,
point_colour = NA
)
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
.width = c(0.66, 0.95),
justification = -0.1,
point_colour = NA
) +
geom_boxplot(
width = 0.15,
.width = c(0.66, 0.95),
outlier.shape = NA,
alpha = 0.5,
position = position_nudge(y = 0.2)
)
post_durationCat <-
data_prepost_cat %>%
data_grid(
percProm = unique(percProm),
gender_s = 0.1563  # Set gender_s to zero to average over gender
) %>%
add_epred_draws(mdl_durationCat, re_formula = NA) %>%
mutate(
percProm = factor(percProm, levels = c("1", "2", "3"))
) %>%
ggplot(aes(y = percProm, x = .epred, fill = percProm)) +
ggdist::stat_halfeye(
adjust = 0.5,
width = 0.6,
.width = c(0.66, 0.95),
justification = -0.1,
point_colour = NA
) +
geom_boxplot(
width = 0.15,
outlier.shape = NA,
alpha = 0.5,
position = position_nudge(y = 0.2)
) +
stat_summary(
fun = median,
geom = "point",
color = "red",
size = 2,
position = position_nudge(y = 0.2)
) +
scale_fill_manual(values = colorBlindBlack8) +
coord_flip() +
theme_minimal() +
theme(text = element_text(size = 18)) +
#xlim(1, 3.5) +
labs(
y = "Perceived prominence level",
x = "Posterior duration",
fill = "Perceived\nprominence"
)
post_durationCat;
ggsave(plot = post_durationCat, filename = paste0(plots, "posterior_durationCat.pdf"),
width = 8, height = 6);
ggsave(plot = post_durationCat, filename = paste0(plots, "posterior_durationCat.jpg"),
width = 8, height = 6);
ggsave(plot = post_durationCat, filename = paste0(plots, "posterior_durationCat.tif"),
width = 8, height = 6, compression="lzw", dpi=600);
