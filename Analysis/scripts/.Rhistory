data <- read_csv(paste0(datasets, "syllables_soundgen_summary.csv"))
# Remove the duration column from data_df
data_df$duration <- data_df$duration / 1000
# Merge the two data frames by matching 'file' in data with 'fileName' in data_df
data <- merge(data_df, data, by.y = "file", by.x = "fileName", all = TRUE)
# Select and rename the duration.x column to duration, and filter itemType == "target"
data <- data %>%
filter(itemType == "target") %>%
select(-duration.y) %>%   # Remove duration.y if it exists
rename(duration = duration.x)
# Load in previously extracted data
df <- read.csv(paste0(datasets, "df.csv"))
# Select only the necessary columns from df for the merge
df <- df %>%
select(Language, Participant, Item_num, Word, Syll_num, F0_slope, env_slope) %>%
rename(f0_slope = F0_slope)
# Perform the left join to append F0_slope and env_slope to data
data <- data %>%
left_join(df, by = c("language" = "Language",
"participant" = "Participant",
"itemNum" = "Item_num",
"word" = "Word",
"annotationNum" = "Syll_num"))
rm(df)
View(data)
unique(data$syllTextText)
# Update df with modified 'syllText' values
data <- data %>%
mutate(syllText = case_when(
syllText == "-p-Y" ~ "-p-",
syllText == "Pre" ~ "pre",
syllText == "Post" ~ "post",
syllText == " ̞post "~ "post",
syllText == "post " ~ "post",
syllText == "posr" ~ "post",
syllText == "prepost" ~ "postpre",
syllText == "PrePost" ~ "postpre",
syllText == "PostPre" ~ "postpre",
syllText == "Postpre" ~ "postpre",
syllText == "post:pre" ~ "postpre",
syllText == "post-pre" ~ "postpre",
syllText == "post–pre" ~ "postpre",
syllText == "postPre" ~ "postpre",
syllText == "prepost" ~ "postpre",
syllText == "postpost" ~ "postpre",
syllText == "postpre " ~ "postpre", # Remove trailing space
TRUE ~ syllText # Keep other values as they are
))
unique(data$syllText)
# Modify the data frame
data1 <- data %>%
mutate(percProm = ifelse(grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE) | syllText == "", NA, percProm))
View(data1)
# Modify the data frame
data <- data %>%
mutate(percProm = ifelse(grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE) | syllText == "", NA, percProm))
rm(data1)
# Create a subset excluding non-target syllables
targets <- data %>%
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE) & syllText != "")
data <- data %>%
select(fileName, language, participant, itemType, itemNum, focus,
annotationNum, word, syllText, percProm,
duration, duration_noSilence,
ampl_median, ampl_noSilence_median, env_slope,
pitch_median, pitch_sd, f0_slope,
f1_freq_median, f2_freq_median,
specCentroid_median, entropy_median,
HNR_median,
amEnvDep_median, fmDep_median)
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Join data with itself based on fileName and the target annotationNum and group by relevant columns
left_join(data, by = c("language" = "language",
"participant" = "participant",
"itemType" = "itemType",
"itemNum" = "itemNum",
"annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Filter to keep only rows where syllText.y contains "pre"
filter(grepl("pre", syllText.y)) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Join data with itself based on fileName and the target annotationNum and group by relevant columns
left_join(data, by = c("language" = "language",
"participant" = "participant",
"itemType" = "itemType",
"itemNum" = "itemNum",
"annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Filter to keep only rows where syllText.y contains "post"
filter(grepl("post", syllText.y)) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
# Check the structure of the updated data
str(data_prepost)
View(data_prepost)
# Find the missing fileNames in data_prepost compared to targets
missing_from_prepost <- anti_join(targets, data_prepost, by = "fileName")
View(missing_from_prepost)
View(data)
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria and get their fileName and annotationNum
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## Ensure all target syllables are included
right_join(data %>%
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum"))
View(data_prepost)
# Substitute missing percProm values
update_values <- data.frame(
fileName = c("G01_T_04_C_2_Adj_gʁy_", "G01_T_10_F_2_Adj_liː_", "G01_T_14_F_2_Adj_liː_", "G01_T_16_R_2_Adj_gʁy_",
"G01_T_22_R_6_Adj_liː_", "G01_T_23_I_6_N_miː_", "G01_T_25_C_7_Adj_li-_", "G01_T_26_R_2_Adj_liː_",
"G01_T_33_B_3_Adj_li-_", "G01_T_34_B_7_Adj_ʁɒʃ_", "G02_T_12_R_2_Adj_gʁyː_", "G02_T_16_R_2_Adj_gʁyː_",
"G02_T_20_F_2_Adj_gʁy-_", "G05_T_25_C_6__ʁʊk_", "G07_T_03_I_5__ʃtɪft_", "G07_T_06_F_2__li_",
"G07_T_11_C_2__gʁy_", "G07_T_20_F_2__gʁy_", "G07_T_32_B_2__gɛl_", "G09_T_07_I_3__li_",
"G10_T_13_I_2__lɪ_", "G10_T_29_B_2__gry_", "G13_T_02_I_6_N_ga_", "G13_T_05_R_4_N_keɐ_",
"G13_T_13_I_5_N_smart_", "G13_T_15_C_5_N_lœf_", "G14_T_16_R_2__gry_", "G14_T_20_F_2__gry_",
"G14_T_22_R_2__an_", "G14_T_23_I_2__lɪ_", "G14_T_25_C_5__ruk_", "G14_T_28_F_2__gɛl_",
"G14_T_29_B_5__flan_", "G16_T_11_C_2__gry_", "G16_T_13_I_2__li-_", "G16_T_14_F_2__lɪ_",
"G16_T_23_I_2__li-_", "G16_T_25_C_2__lɪ_", "G16_T_32_B_5__gɛlb_", "G17_T_35_B_4_N_pfan_"),
percProm = c(2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 3, 2, 2, 2, 1, 1, 2, 1, 2, 1, 3, 2, NA, 2, 1, 2, 2, 1, 2, 3, 3, 2, 2)
)
str(NA_percProm_targets)
# Substitute missing percProm values
NA_percProm_targets$percProm <- c(2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 3, 2, 2, 2, 1, 1, 2, 1, 2, 1, 3, 2, NA, 2, 1, 2, 2, 1, 2, 3, 3, 2, 2, 2)
View(NA_percProm_targets)
data1 <- data %>%
left_join(NA_percProm_targets, by = "fileName") %>%
mutate(percProm = coalesce(percProm.y, percProm.x)) %>%
select(-percProm.x, -percProm.y)
View(data1)
data <- data %>%
left_join(NA_percProm_targets, by = "fileName") %>%
mutate(percProm = coalesce(percProm.y, percProm.x)) %>%
select(-percProm.x, -percProm.y)
rm(data1)
# Update targets
targets <- data %>%
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE) & syllText != "")
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## Ensure all target syllables are included
right_join(data %>%
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum"))
# Find the missing fileNames in data_prepost compared to targets
missing_from_prepost <- anti_join(targets, data_prepost, by = "fileName")
# Find the missing fileNames in data_prepost compared to targets
missing_from_prepost <- anti_join(data_prepost, targets, by = "fileName")
View(missing_from_prepost)
data <- data %>%
mutate(syllText = if_else(fileName == "G05_T_10_F_6_N_ ̞post_2", "post", syllText))
data %>% filter(fileName == "G05_T_10_F_6_N_ ̞post_2")
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## Ensure all target syllables are included
right_join(data %>%
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum"))
View(data_prepost)
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
# Dynamically rename columns to remove the .x ending
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
## Ensure all target syllables are included
right_join(data %>%
filter(!(syllText %in% c("pre", "post", "", "postpre", "disfluency", "break", "-p-"))),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum")) %>%
# Re-run renaming to ensure all .x endings are removed
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
View(data_prepost)
colnames(data_prepost)
View(data_prepost)
str(data_prepost)
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Left join to include all target syllables
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
## Ensure all target syllables are included
right_join(data %>%
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum")) %>%
# Re-run renaming to ensure all .x endings are removed
rename_with(~ sub("\\.x$", "", .), ends_with(".x")) %>%
rename_with(~ sub("\\.y$", "", .), ends_with(".y"))
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Join data with itself based on fileName and the target annotationNum and group by relevant columns
left_join(data, by = c("language" = "language",
"participant" = "participant",
"itemType" = "itemType",
"itemNum" = "itemNum",
"annotationNumTarget" = "annotationNum"), suffix = c("", ".pre")) %>%
# Filter to keep only rows where syllText.pre contains "pre"
filter(grepl("pre", syllText.pre)) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Ensure all target syllables are included
right_join(data %>%
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum"), suffix = c("", ".pre")) %>%
# Dynamically rename columns to remove the .pre ending
rename_with(~ sub("\\.pre$", "Pre", .), ends_with(".pre")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Join data with itself based on fileName and the target annotationNum and group by relevant columns
left_join(data, by = c("language" = "language",
"participant" = "participant",
"itemType" = "itemType",
"itemNum" = "itemNum",
"annotationNumTarget" = "annotationNum"), suffix = c("", ".post")) %>%
# Filter to keep only rows where syllText.post contains "post"
filter(grepl("post", syllText.post)) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Ensure all target syllables are included
right_join(data %>%
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum"), suffix = c("", ".post")) %>%
# Dynamically rename columns to remove the .post ending
rename_with(~ sub("\\.post$", "Post", .), ends_with(".post")) %>%
# Re-run renaming to ensure all .x endings are removed
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
# Combined process to find "pre" and "post" syllables
data_prepost <- data %>%
# First, find rows that do not match the initial exclusion criteria
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)) %>%
## PRE
# Create a new data frame for finding the corresponding "pre" syllables
bind_rows(
mutate(., annotationNumTarget = annotationNum - 1),
mutate(., annotationNumTarget = annotationNum - 2)
) %>%
# Join data with itself based on relevant columns
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "pre"
mutate(across(ends_with(".y"), ~ if_else(grepl("pre", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "pre" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Pre
rename_with(~ sub("\\.y$", "Pre", .), ends_with(".y")) %>%
## POST
# Create a new data frame for finding the corresponding "post" syllables
mutate(annotationNumTarget = annotationNum + 1) %>%
# Join data with itself based on relevant columns
left_join(data, by = c("language", "participant", "itemType", "itemNum", "annotationNumTarget" = "annotationNum"), suffix = c("", ".y")) %>%
# Modify the joined columns to be NA where syllText.y does not contain "post"
mutate(across(ends_with(".y"), ~ if_else(grepl("post", syllText.y), ., NA), .names = "{.col}")) %>%
# Group by necessary columns to ensure only one "post" syllable per target
group_by(fileName, annotationNum) %>%
slice_min(annotationNumTarget, with_ties = FALSE) %>%
ungroup() %>%
# Dynamically rename columns that end with .y to end with Post
rename_with(~ sub("\\.y$", "Post", .), ends_with(".y")) %>%
## Ensure all target syllables are included
right_join(data %>%
filter(!grepl("pre|post|postpre|disfluency|break|-p-", syllText, ignore.case = TRUE)),
by = c("fileName", "annotationNum", "language", "participant", "itemType", "itemNum")) %>%
# Remove redundant columns
select(-ends_with(".y"))
View(data_prepost)
# Final renaming to remove .x and ensure column uniqueness
data_prepost <- data_prepost %>%
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
colnames(data_prepost)
# Remove "percPromPost" and "percPromPre" columns
data_prepost <- data_prepost %>%
select(-percPromPost, -percPromPre)
# Sort columns so that "percProm" comes after "syllText"
data_prepost <- data_prepost %>%
select(fileName, language, participant, itemType, itemNum, focus, annotationNum, word, syllText, percProm,
everything())
View(data_prepost)
# Remove "percPromPost" and "percPromPre" columns
data_prepost <- data_prepost %>%
select(-fileNamePre, -focusPre, -wordPre, -fileNamePost, -focusPost, -wordPost, -percPromPost, -percPromPre)
# Remove "percPromPost" and "percPromPre" columns
data_prepost <- data_prepost %>%
select(-fileNamePre, -focusPre, -wordPre, -fileNamePost, -focusPost, -wordPost)
write.csv(data_prepost, file = paste0(datasets, "data_prepost.csv"), row.names = FALSE)
